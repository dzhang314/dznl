from typing import overload

class BoolRef(object):
    def __eq__(  # pyright: ignore[reportIncompatibleMethodOverride]
        self, other: bool | BoolRef
    ) -> BoolRef: ...
    def __ne__(  # pyright: ignore[reportIncompatibleMethodOverride]
        self, other: bool | BoolRef
    ) -> BoolRef: ...

def Bool(name: str) -> BoolRef: ...
def BoolVal(value: bool) -> BoolRef: ...
def Not(arg: bool | BoolRef) -> BoolRef: ...
def And(*args: bool | BoolRef) -> BoolRef: ...
def Or(*args: bool | BoolRef) -> BoolRef: ...
def Implies(a: bool | BoolRef, b: bool | BoolRef) -> BoolRef: ...

class ArithRef(object):
    def __eq__(  # pyright: ignore[reportIncompatibleMethodOverride]
        self, other: int | ArithRef
    ) -> BoolRef: ...
    def __ne__(  # pyright: ignore[reportIncompatibleMethodOverride]
        self, other: int | ArithRef
    ) -> BoolRef: ...
    def __lt__(self, other: int | ArithRef) -> BoolRef: ...
    def __le__(self, other: int | ArithRef) -> BoolRef: ...
    def __gt__(self, other: int | ArithRef) -> BoolRef: ...
    def __ge__(self, other: int | ArithRef) -> BoolRef: ...
    def __add__(self, other: int | ArithRef) -> ArithRef: ...
    def __sub__(self, other: int | ArithRef) -> ArithRef: ...

class CheckSatResult(object): ...

sat: CheckSatResult
unsat: CheckSatResult
unknown: CheckSatResult

class ModelRef(object):
    @overload
    def __getitem__(self, key: ArithRef) -> int | None: ...
    @overload
    def __getitem__(self, key: BoolRef) -> bool | None: ...

class Solver(object):
    def add(self, expr: BoolRef) -> None: ...
    def check(self) -> CheckSatResult: ...
    def model(self) -> ModelRef: ...

def Int(name: str) -> ArithRef: ...
def Abs(x: int | ArithRef) -> ArithRef: ...
def If(c: bool | BoolRef, a: int | ArithRef, b: int | ArithRef) -> ArithRef: ...
