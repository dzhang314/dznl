(set-logic QF_BVFP)
#include "Float16.inc"
#include "FloatDefs.inc"

(declare-const sa0 SIGN)
(declare-const sb0 SIGN)
(declare-const sc0 SIGN)
(declare-const sd0 SIGN)
(declare-const sa4 SIGN)
(declare-const sb4 SIGN)
(declare-const sc4 SIGN)
(declare-const sd4 SIGN)

(declare-const ra0 EXPONENT)
(declare-const rb0 EXPONENT)
(declare-const rc0 EXPONENT)
(declare-const rd0 EXPONENT)
(declare-const ra4 EXPONENT)
(declare-const rb4 EXPONENT)
(declare-const rc4 EXPONENT)
(declare-const rd4 EXPONENT)

(declare-const ma0 MANTISSA)
(declare-const mb0 MANTISSA)
(declare-const mc0 MANTISSA)
(declare-const md0 MANTISSA)
(declare-const ma4 MANTISSA)
(declare-const mb4 MANTISSA)
(declare-const mc4 MANTISSA)
(declare-const md4 MANTISSA)

(define-fun ea0 () INT (apply-bias ra0))
(define-fun eb0 () INT (apply-bias rb0))
(define-fun ec0 () INT (apply-bias rc0))
(define-fun ed0 () INT (apply-bias rd0))
(define-fun ea4 () INT (apply-bias ra4))
(define-fun eb4 () INT (apply-bias rb4))
(define-fun ec4 () INT (apply-bias rc4))
(define-fun ed4 () INT (apply-bias rd4))

(define-fun a0 () FLOAT (fp sa0 ra0 ma0))
(define-fun b0 () FLOAT (fp sb0 rb0 mb0))
(define-fun c0 () FLOAT (fp sc0 rc0 mc0))
(define-fun d0 () FLOAT (fp sd0 rd0 md0))
(define-fun a4 () FLOAT (fp sa4 ra4 ma4))
(define-fun b4 () FLOAT (fp sb4 rb4 mb4))
(define-fun c4 () FLOAT (fp sc4 rc4 mc4))
(define-fun d4 () FLOAT (fp sd4 rd4 md4))

(assert (not (fp.isSubnormal a0)))
(assert (not (fp.isSubnormal b0)))
(assert (not (fp.isSubnormal c0)))
(assert (not (fp.isSubnormal d0)))
(assert (not (fp.isSubnormal a4)))
(assert (not (fp.isSubnormal b4)))
(assert (not (fp.isSubnormal c4)))
(assert (not (fp.isSubnormal d4)))

(assert (not (fp.isInfinite a0)))
(assert (not (fp.isInfinite b0)))
(assert (not (fp.isInfinite c0)))
(assert (not (fp.isInfinite d0)))
(assert (not (fp.isInfinite a4)))
(assert (not (fp.isInfinite b4)))
(assert (not (fp.isInfinite c4)))
(assert (not (fp.isInfinite d4)))

(assert (not (fp.isNaN a0)))
(assert (not (fp.isNaN b0)))
(assert (not (fp.isNaN c0)))
(assert (not (fp.isNaN d0)))
(assert (not (fp.isNaN a4)))
(assert (not (fp.isNaN b4)))
(assert (not (fp.isNaN c4)))
(assert (not (fp.isNaN d4)))

(assert (= a0 (two-sum a0 c0)))
(assert (= c0 (two-sum-err a0 c0)))
(assert (= b0 (two-sum b0 d0)))
(assert (= d0 (two-sum-err b0 d0)))

; a1, b1 = two_sum(a0, b0)
(define-fun a1 () FLOAT (two-sum a0 b0))
(define-fun b1 () FLOAT (two-sum-err a0 b0))

; c1, d1 = two_sum(c0, d0)
(define-fun c1 () FLOAT (two-sum c0 d0))
(define-fun d1 () FLOAT (two-sum-err c0 d0))

; a2, c2 = two_sum(a1, c1)
(define-fun a2 () FLOAT (two-sum a1 c1))
(define-fun c2 () FLOAT (two-sum-err a1 c1))

; b2, d2 = two_sum(b1, d1)
(define-fun b2 () FLOAT (two-sum b1 d1))
(define-fun d2 () FLOAT (two-sum-err b1 d1))

; b3, c3 = two_sum(b2, c2)
(define-fun b3 () FLOAT (two-sum b2 c2))
(define-fun c3 () FLOAT (two-sum-err b2 c2))

; a4, b4 = two_sum(a2, b3)
(assert (= a4 (two-sum a2 b3)))
(assert (= b4 (two-sum-err a2 b3)))

; c4, d4 = two_sum(c3, d2)
(assert (= c4 (two-sum c3 d2)))
(assert (= d4 (two-sum-err c3 d2)))

(assert (not (or
    (bvsgt ea4 (bvadd ec4 (bvsub (bvadd PRECISION_INT PRECISION_INT) ONE_INT)))
    (fp.isZero c4))))

(check-sat)
(get-model)
